package org.o7planning.tutorial.helloosgi.calculatorservice.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.o7planning.tutorial.helloosgi.calculatorservice.CalculateService;

//to do
//auto language detection-done
//integer range support upto decillion(use of double)
//accurate translation from thousands upto limit
public class CalculateServiceImpl implements CalculateService {

	//constants
	Map<String, Double> dictTR = new HashMap<String, Double>() {{
		put("eksi",101.0     );
		put("sıfır",0.0     );
        put("bir",1.0     );
        put("iki",2.0     );
        put("üç",3.0      );
        put("dört",4.0    );
        put("beş",5.0     );
        put("altı",6.0    );
        put("yedi",7.0    );
        put("sekiz",8.0   );
        put("dokuz",9.0   );
        put("on",10.0    );
        put("on bir",11.0);
        put("on iki",12.0);
        put("yirmi",20.0 );
        put("otuz",30.0  );
        put("kırk",40.0  );
        put("elli",50.0  );
        put("altmış",60.0);
        put("yetmiş",70.0);
        put("seksen",80.0);
        put("doksan",90.0);
        put("yüz",100.0  );
        put("bin",1000.0 );
        put("milyon",1000000.0);
    }};
    Map<String, Double> dictEN = new HashMap<String, Double>() {{
    	put("minus",101.0     );
		put("zero",0.0     );
        put("one",1.0     );
        put("two",2.0     );
        put("three",3.0      );
        put("four",4.0    );
        put("five",5.0     );
        put("six",6.0    );
        put("seven",7.0    );
        put("eight",8.0   );
        put("nine",9.0   );
        put("ten",10.0    );
        put("eleven",11.0);
        put("twelve",12.0);
        put("thirteen",13.0);
        put("fourteen",14.0);
        put("fifteen",15.0);
        put("sixteen",16.0);
        put("seventeen",17.0);
        put("eighteen",18.0);
        put("nineteen",19.0);
        put("twelve",12.0);
        put("twenty",20.0 );
        put("thirty",30.0  );
        put("fourty",40.0  );
        put("fifty",50.0  );
        put("sixty",60.0);
        put("seventy",70.0);
        put("eighty",80.0);
        put("ninety",90.0);
        put("hundred",100.0  );
        put("thousand",1000.0 );
        put("million",1000000.0);
    }};
    Map<Integer,String> dictTRback = new HashMap<Integer,String>() {{
        put(0      ,"sıfır"    );
        put(1      ,"bir"      );
        put(2      ,"iki"      );
        put(3      ,"üç"       );
        put(4      ,"dört"     );
        put(5      ,"beş"      );
        put(6      ,"altı"     );
        put(7      ,"yedi"     );
        put(8      ,"sekiz"    );
        put(9      ,"dokuz"    );
        put(10     , "on"      );
        put(11     , "on bir"  );
        put(12     , "on iki"  );
        put(20     , "yirmi"   );
        put(30     , "otuz"    );
        put(40     , "kırk"    );
        put(50     , "elli"    );
        put(60     , "altmış"  );
        put(70     , "yetmiş"  );
        put(80     , "seksen"  );
        put(90     , "doksan"  );
        put(100    , "yüz"     );
        put(1000   , "bin"     );
        put(10000  ,"on bin");
        put(100000  ,"yüz bin");
        put(1000000, "milyon"  );
    }};                            
    Map<Integer,String> dictENback = new HashMap<Integer,String>() {{
		put(0         ,"zero" );
        put(1          ,"one");
        put(2          ,"two");
        put(3        ,"three"   );
        put(4         ,"four");
        put(5         ,"five" );
        put(6          ,"six");
        put(7        ,"seven" );
        put(8        ,"eight");
        put(9         ,"nine");
        put(10         ,"ten");
        put(11      ,"eleven");
        put(12      ,"twelve");
        put(13      ,"thirteen");
        put(14      ,"fourteen");
        put(15      ,"fifteen");
        put(16      ,"sixteen");
        put(17      ,"seventeen");
        put(18      ,"eighteen");
        put(19      ,"nineteen");
        put(20      ,"twenty");
        put(30      ,"thirty" );
        put(40      ,"fourty" );
        put(50       ,"fifty");
        put(60       ,"sixty");
        put(70     ,"seventy");
        put(80      ,"eighty");
        put(90      ,"ninety");
        put(100    ,"hundred");
        put(1000  ,"thousand");
        put(10000  ,"ten thousand");
        put(100000  ,"hundred thousand");
        put(1000000,"millon");
    }};
    Map<Integer,String> dictMapName= new HashMap<Integer,String>() {{
    	put(0,"TR");
    	put(1,"EN");
    }};
    Map<Integer,Map<String,Integer>> dictMap = new HashMap<Integer,Map<String,Integer>>() {{
		put(0,dictTR);
		put(1,dictEN);
    }};
    
    //var
	private String num1  = "";
	private String num2  = "";
	private String op  = "";
	private String lang  = ""; 
	private List<String> num1List;
	private List<String> num2List;
	
	@Override
	public String[] recieveInputs(String numString1, String numString2, String operation) {
		//var
		String result = "";
		double num1Result = 0;
		double num2Result = 0;
		double resultInt = 0;
		
		num1 = numString1.trim();
		num2 = numString2.trim();
		op = operation.trim();
		num1List = new ArrayList<String>(Arrays.asList(num1.split(" ")));
		num2List = new ArrayList<String>(Arrays.asList(num2.split(" ")));
		
		lang = detectLanguageBruteForce(num1List, num2List);
		
		if(lang.equals("Error")) {
			result = lang;
		}
		else {
			num1Result = translate(num1List);
			num2Result = translate(num2List);
			
			resultInt = calculate(num1Result,num2Result,operation);
			result = translateBack(resultInt);
		}	
		System.out.println(lang);
		return new String[]{result,Double.toString(num1Result),Double.toString(num2Result),Double.toString(resultInt)};
	}
	
	//only using first num to detect for now
	private String detectLanguageBruteForce(List<String> num1List2, List<String> num2List2) {
		List<String> newList = Stream.concat(num1List2.stream(), num2List2.stream())
                .collect(Collectors.toList());
		
		int index = 0;
		int size = newList.size();
		boolean unknown = true;
		String tempStr = "";
		
		while(unknown) {
			if(index == size) {
				return "Error";
			}
			tempStr = newList.get(index);
			
			for(int i = 0; i < dictMap.size(); i++) {
				if(dictMap.get(i).containsKey(tempStr)) {
					return dictMapName.get(i);
				}
			}
			
			index++;
		}
		
		return null;
	}

	private double calculate(double num1Result, double num2Result, String operation) {
		switch(operation) {
		case "Topla":
			return add(num1Result,num2Result);
		case "Çıkar":
			return sub(num1Result,num2Result);
		case "Çarp":
			return mul(num1Result,num2Result);
		case "Böl":
			return div(num1Result,num2Result);
		default:
			return -1;
		}
	}

	private double div(double num1Result, double num2Result) {
		if(num2Result != 0)
			return num1Result / num2Result;
		else
			return -1;
	}

	private double mul(double num1Result, double num2Result) {
		return num1Result*num2Result;
	}

	private double sub(double num1Result, double num2Result) {
		return num1Result-num2Result;
	}

	private double add(double num1Result, double num2Result) {
		return num1Result+num2Result;
	}

	private double translate(List<String> list) {
		boolean compFlag = true;
		int index = 0;
		double result = 0;
		int sign = 1;
		int length = list.size();
		//to-do check language
		Map<String, Integer> dict = new HashMap<String, Integer>();
		switch(lang) {
		case "TR":
			dict = dictTR;
			break;
		case "EN":
			dict = dictEN;
			break;
		}
		
		while(compFlag && index < length) {
			int temp1 = dict.getOrDefault(list.get(index),101);
			//if its readable
			if(temp1 != 101) {
				//if its not the last number/string
				if(index < length - 1) {
					//if the first num is not 100 or 1000
					if(temp1%100 != 0) {
						int temp2 = dict.getOrDefault(list.get(index + 1),101);
						//if its 10 20 .. 100 1000
						if(temp2%10 == 0) {
							temp1 *= temp2;
						}
						//if its 10 20 .. 100 1000 else
						else {
							temp1 += temp2;
						}
						result += temp1;
						//if the next next number/string exists
						if(index + 2 < length) {
							index += 2;
						}
						else {
							compFlag = false;
						}
					}
					//if the first num is not 100 or 1000 else
					else {
						result += temp1;
						index += 1;
					}		
				}
				//if its not the last number/string else
				else {
					result += temp1;				
					compFlag = false;
				}
			}
			//if its readable else
			else {
				sign *= -1;
				index += 1;
			}
			//System.out.println("Index = " + index + " result = " + result);
		}
		
		return result * sign;
	}

	private String translateBack2(double num) {
		Map<Integer,String> dict = new HashMap<Integer,String>();
		String result = "";
		String minus = "";
		String minusTR = "eksi", minusEN = "minus";
		double n;
		int powerOfTen = 0;
		boolean firstTime = true;
		ArrayList<Integer> splicedNum = new ArrayList<Integer>();
		
		switch(lang) {
		case "TR":
			dict = dictTRback;
			minus = minusTR;
			break;
		case "EN":
			dict = dictENback;
			minus = minusEN;
			break;
		}
	
		n = Math.abs(num);
		
		if(num == 0) {
			return dict.getOrDefault(num, "");
		}	
		return null;
	}
	
	private String translateBack(double num) {
		Map<Integer,String> dict = new HashMap<Integer,String>();
		String result = "";
		String minus = "";
		String minusTR = "eksi", minusEN = "minus";
		double n;
		int powerOfTen = 0;
		boolean firstTime = true;
		
		switch(lang) {
		case "TR":
			dict = dictTRback;
			minus = minusTR;
			break;
		case "EN":
			dict = dictENback;
			minus = minusEN;
			break;
		}
	
		n = Math.abs(num);
		
		if(num == 0) {
			return dict.getOrDefault(num, "");
		}
		while(n > 0) {
			//0 < x < 100
			if(firstTime) {
				double temp1 = n % 100;
				int tempPOT = powerOfTen;
				String temp2 = dict.getOrDefault(temp1, "");
				//check if its zero
				if(temp1 == 0) {	
					n = n / 100;
					tempPOT += 2;
				}
				else if(!temp2.equals("")) {
					result = temp2 + " " + result;
					n = n / 100;
					tempPOT += 2;
				}
				else {
					double temp3 = temp1 % 10;
					double temp4 = temp1 - temp3;
					
					String temp5 = dict.getOrDefault(temp3, "");
					String temp6 = dict.getOrDefault(temp4, "");
					
					if(!temp5.equals("")) {
						result = temp5 + " " + result;
						n = n / 10;
					}	
					if(!temp6.equals("")) {
						result = temp6 + " " + result;
						n = n / 10;
					}
					tempPOT += 2;
				}
				firstTime = false;
				powerOfTen = tempPOT;
			}
			//x >= 1m (0 <= n < 1000)
			else if(powerOfTen >= 6){
				double temp = n % 1000;
				double temp1 = n % 100;
				int tempPOT = powerOfTen;
				String temp2 = dict.getOrDefault(temp1, "");
				String subResult = "";			
				
				//if n > 100
				if(temp/100 > 0) {
					subResult = temp/100 + " " + dict.getOrDefault(100, "") + " " + result;
					
					powerOfTen += 3;
					n = n / 1000;
				}
				else {	
					//check if its zero
					if(temp1 == 0) {	
						n = n / 100;
						tempPOT += 2;
					}
					else if(!temp2.equals("")) {
						subResult = temp2 + " " + subResult;
						n = n / 100;
						tempPOT += 2;
					}
					else {
						double temp3 = temp1 % 10;
						double temp4 = temp1 - temp3;
						
						String temp5 = dict.getOrDefault(temp3, "");
						String temp6 = dict.getOrDefault(temp4, "");
						
						if(!temp5.equals("")) {
							subResult = temp5 + " " + result;
							n = n / 10;
						}	
						if(!temp6.equals("")) {
							subResult = temp6 + " " + result;
							n = n / 10;
						}
						tempPOT += 2;
					}
					firstTime = false;
					powerOfTen = tempPOT;	
					result = subResult + " osman";
				}
				
				
			}
			//1k < x < 1m
			else {
				double temp1 = n % 10;
				int powerOfTenInt = (int) Math.pow(10, powerOfTen);
				
				String temp2 = dict.getOrDefault(temp1, "");
				if(!temp2.equals("")) {
					if(temp2.equals(dict.getOrDefault(0, ""))) {
						//nothing
					}
					else if(temp2.equals(dict.getOrDefault(1, "")) && lang.equals("TR")){
						result = dict.getOrDefault(powerOfTenInt, "") + " " + result;
					}
					else {
						result = temp2 + " " + dict.getOrDefault(powerOfTenInt, "") + " " + result;
					}
					powerOfTen += 1;
				}
				n = n /10;
			}
		}
		
		if(num < 0) {
			result = minus + " " + result;
		}
		
		return result.trim();
	}

}
